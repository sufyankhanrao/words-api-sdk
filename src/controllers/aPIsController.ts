/**
 * Words APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DefinitionsResponse,
  definitionsResponseSchema,
} from '../models/definitionsResponse';
import {
  ExamplesResponse,
  examplesResponseSchema,
} from '../models/examplesResponse';
import {
  FrequencyResponse,
  frequencyResponseSchema,
} from '../models/frequencyResponse';
import {
  PronunciationResponse,
  pronunciationResponseSchema,
} from '../models/pronunciationResponse';
import {
  SynonymsResponse,
  synonymsResponseSchema,
} from '../models/synonymsResponse';
import { WordResponse, wordResponseSchema } from '../models/wordResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class APIsController extends BaseController {
  /**
   * Get synonyms of a word.
   *
   * @param word The word to search synonyms for.
   * @return Response from the API call
   */
  async synonyms(
    word: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SynonymsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ word: [word, string()] });
    req.appendTemplatePath`/words/${mapped.word}/synonyms`;
    return req.callAsJson(synonymsResponseSchema, requestOptions);
  }

  /**
   * Get definitions of a word, including the part of speech.
   *
   * @param word The word to search the definitions for.
   * @return Response from the API call
   */
  async definitions(
    word: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DefinitionsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ word: [word, string()] });
    req.appendTemplatePath`/words/${mapped.word}/definitions`;
    return req.callAsJson(definitionsResponseSchema, requestOptions);
  }

  /**
   * How to pronounce a word, according to the International Phonetic Alphabet. May include multiple
   * results if the word is pronounced differently depending on its part of speech.
   *
   * @param word The word to search pronunciation for.
   * @return Response from the API call
   */
  async pronunciation(
    word: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PronunciationResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ word: [word, string()] });
    req.appendTemplatePath`/words/${mapped.word}/pronunciation`;
    return req.callAsJson(pronunciationResponseSchema, requestOptions);
  }

  /**
   * Retrieve information about a word. Results can include definitions, part of speech, synonyms,
   * related words, syllables, and pronunciation. This method is useful to see which relationships are
   * attached to which definition and part of speech of a word.
   *
   * @param word This is a template parameter that is used to provide the word, about which the information
   *                       is being fetched.
   * @return Response from the API call
   */
  async word(
    word: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WordResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ word: [word, string()] });
    req.appendTemplatePath`/words/${mapped.word}`;
    return req.callAsJson(wordResponseSchema, requestOptions);
  }

  /**
   * Get examples of how the word is used.
   *
   * @param word The word to search the examples for.
   * @return Response from the API call
   */
  async examples(
    word: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExamplesResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ word: [word, string()] });
    req.appendTemplatePath`/words/${mapped.word}/examples`;
    return req.callAsJson(examplesResponseSchema, requestOptions);
  }

  /**
   * Expands upon the frequency score returned by the main /words/{word} endpoint. Returns zipf, a score
   * indicating how common the word is in the English language, with a range of 1 to 7; per Million, the
   * number of times the word is likely to appear in a corpus of one million English words; and diversity,
   * a 0-1 scale the shows the likelihood of the word appearing in an English document that is part of a
   * corpus.
   *
   * @param word The word to search frequency for.
   * @return Response from the API call
   */
  async frequency(
    word: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FrequencyResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ word: [word, string()] });
    req.appendTemplatePath`/words/${mapped.word}/frequency`;
    return req.callAsJson(frequencyResponseSchema, requestOptions);
  }
}
